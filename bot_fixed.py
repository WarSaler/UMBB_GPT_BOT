#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram Bot —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
"""

import os
import asyncio
import logging
from io import BytesIO
from typing import Optional, Dict, Any

# –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–º–ø–æ—Ä—Ç–∞ telegram –º–æ–¥—É–ª–µ–π
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import (
        Application, CommandHandler, MessageHandler, CallbackQueryHandler,
        filters, ContextTypes
    )
    from telegram.constants import ParseMode
    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∏–º–ø–æ—Ä—Ç telegram –º–æ–¥—É–ª–µ–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±)")
except ImportError as e:
    print(f"‚ùå –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e}")
    try:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–º–ø–æ—Ä—Ç–∞
        import telegram
        from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
        from telegram.ext import (
            Application, CommandHandler, MessageHandler, CallbackQueryHandler,
            filters, ContextTypes
        )
        from telegram.constants import ParseMode
        print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∏–º–ø–æ—Ä—Ç telegram –º–æ–¥—É–ª–µ–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)")
    except ImportError as e2:
        print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e2}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ python_telegram_bot
        try:
            import python_telegram_bot as telegram
            from python_telegram_bot import Update, InlineKeyboardButton, InlineKeyboardMarkup
            from python_telegram_bot.ext import (
                Application, CommandHandler, MessageHandler, CallbackQueryHandler,
                filters, ContextTypes
            )
            from python_telegram_bot.constants import ParseMode
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∏–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ python_telegram_bot")
        except ImportError as e3:
            print(f"‚ùå –ò–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ python_telegram_bot –Ω–µ —É–¥–∞–ª—Å—è: {e3}")
            raise ImportError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å telegram –º–æ–¥—É–ª–∏: {e}, {e2}, {e3}")

try:
    from loguru import logger
except ImportError:
    import logging
    logger = logging.getLogger(__name__)
    logger.info = print
    logger.error = print
    logger.warning = print

try:
    from PIL import Image
except ImportError:
    print("‚ùå PIL –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    Image = None

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from openai_handler import get_openai_handler
except ImportError as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å openai_handler: {e}")
    def get_openai_handler():
        return None

try:
    from ocr_handler import get_ocr_handler
except ImportError as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ocr_handler: {e}")
    def get_ocr_handler():
        return None

try:
    from translator import get_translation_handler
except ImportError as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å translator: {e}")
    def get_translation_handler():
        return None

class TelegramBot:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        try:
            self.openai_handler = get_openai_handler()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI handler: {e}")
            self.openai_handler = None
            
        try:
            self.ocr_handler = get_ocr_handler()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OCR handler: {e}")
            self.ocr_handler = None
            
        try:
            self.translation_handler = get_translation_handler()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Translation handler: {e}")
            self.translation_handler = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.max_image_size = int(os.getenv('MAX_IMAGE_SIZE', '10485760'))  # 10MB
        self.supported_formats = os.getenv('SUPPORTED_IMAGE_FORMATS', 'jpg,jpeg,png,bmp,tiff,webp').split(',')
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.user_settings = {}
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try:
            self.application = Application.builder().token(self.bot_token).build()
            self._setup_handlers()
            logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            raise
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ö–æ–º–∞–Ω–¥—ã
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("settings", self.settings_command))
            self.application.add_handler(CommandHandler("languages", self.languages_command))
            self.application.add_handler(CommandHandler("setlang", self.setlang_command))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
            self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
            self.application.add_handler(CallbackQueryHandler(self.handle_callback))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.application.add_error_handler(self.error_handler)
            
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            raise
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = update.effective_user.id
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.user_settings:
                self.user_settings[user_id] = {
                    'source_language': 'auto',
                    'target_language': 'en',
                    'ocr_language': 'rus+eng',
                    'use_openai_translation': True,
                    'improve_ocr': True
                }
            
            welcome_text = (
                "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UMBB GPT Bot!\n\n"
                "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:\n"
                "üì∏ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (OCR)\n"
                "üåê –ü–µ—Ä–µ–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞\n"
                "ü§ñ –£–ª—É—á—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
            )
            
            await update.message.reply_text(welcome_text)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
            "/languages - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤\n"
            "/setlang <–∫–æ–¥> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞\n\n"
            "üì∏ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤\n\n"
            "üîß **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**\n"
            "JPG, PNG, BMP, TIFF, WebP"
        )
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    async def languages_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /languages"""
        languages_text = (
            "üåê **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:**\n\n"
            "üá∑üá∫ ru - –†—É—Å—Å–∫–∏–π\n"
            "üá∫üá∏ en - English\n"
            "üá©üá™ de - Deutsch\n"
            "üá´üá∑ fr - Fran√ßais\n"
            "üá™üá∏ es - Espa√±ol\n"
            "üáÆüáπ it - Italiano\n"
            "üáµüáπ pt - Portugu√™s\n"
            "üá®üá≥ zh - ‰∏≠Êñá\n"
            "üáØüáµ ja - Êó•Êú¨Ë™û\n"
            "üá∞üá∑ ko - ÌïúÍµ≠Ïñ¥\n"
        )
        
        await update.message.reply_text(languages_text, parse_mode=ParseMode.MARKDOWN)
    
    async def setlang_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setlang"""
        await update.message.reply_text("üîß –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        await update.message.reply_text("üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        await update.message.reply_text("üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        await update.message.reply_text(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {text[:100]}...")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
        
        if update and hasattr(update, 'effective_message'):
            try:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except Exception:
                pass
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self.application.updater.idle()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")
            raise
        finally:
            await self.application.stop()
    
    async def start_webhook(self, webhook_url: str, port: int = 10000):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook"""
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
            await self.application.initialize()
            await self.application.start()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
            await self.application.updater.start_webhook(
                listen="0.0.0.0",
                port=port,
                webhook_url=webhook_url
            )
            
            print(f"‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {webhook_url}")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self.application.updater.idle()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ webhook: {e}")
            raise
        finally:
            await self.application.stop()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot...")
        bot = TelegramBot()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
        webhook_url = os.getenv('WEBHOOK_URL')
        port = int(os.getenv('PORT', 10000))
        
        if webhook_url:
            print(f"üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook: {webhook_url}")
            await bot.start_webhook(webhook_url, port)
        else:
            print("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling")
            await bot.start_polling()
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        raise

if __name__ == "__main__":
    print("ü§ñ UMBB GPT Bot - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)