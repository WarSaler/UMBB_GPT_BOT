#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram Bot –¥–ª—è Render —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π python-telegram-bot
"""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, '/opt/render/project/src')
sys.path.insert(0, '/app')
sys.path.insert(0, str(Path.cwd()))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
PORT = int(os.getenv('PORT', 10000))
WEBHOOK_URL = os.getenv('RENDER_EXTERNAL_URL', 'https://umbb-gpt-bot.onrender.com')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == 'dummy_token':
    logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    logger.error("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    logger.error("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather –≤ Telegram")
    logger.error("2. –í Render Dashboard –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Environment")
    logger.error("3. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º")
    logger.error("4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å")
    sys.exit(1)

try:
    from telegram import Update, Bot
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
    from telegram.constants import ParseMode
    logger.info("‚úÖ Telegram –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ telegram: {e}")
    logger.error("üí° –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª–µ–π...")
    
    import subprocess
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'python-telegram-bot[webhooks]==21.0.1'])
        logger.info("‚úÖ –ú–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        os.execv(sys.executable, [sys.executable] + sys.argv)
    except Exception as install_error:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª–∏: {install_error}")
        sys.exit(1)

try:
    from fastapi import FastAPI, Request
    from fastapi.responses import JSONResponse
    import uvicorn
    logger.info("‚úÖ FastAPI –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FastAPI: {e}")
    logger.error("üí° –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ FastAPI...")
    
    import subprocess
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'fastapi', 'uvicorn[standard]'])
        logger.info("‚úÖ FastAPI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        os.execv(sys.executable, [sys.executable] + sys.argv)
    except Exception as install_error:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FastAPI: {install_error}")
        sys.exit(1)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(title="UMBB GPT Bot")
bot_application = None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UMBB GPT Bot!</b>\n\n"
        "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.\n\n"
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!"
    )
    
    await update.message.reply_text(
        welcome_text,
        parse_mode=ParseMode.HTML
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "ü§ñ –Ø - UMBB GPT Bot, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º!\n\n"
        "üìù <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏\n\n"
        "üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!\n\n"
        "üîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    
    await update.message.reply_text(
        help_text,
        parse_mode=ParseMode.HTML
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = update.message.text
    user_id = update.effective_user.id
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")
    
    # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    responses = {
        "–ø—Ä–∏–≤–µ—Ç": "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        "–∫–∞–∫ –¥–µ–ª–∞": "üòä –£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê —É –≤–∞—Å?",
        "—Å–ø–∞—Å–∏–±–æ": "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å!",
        "–ø–æ–∫–∞": "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â–µ!",
        "–ø–æ–º–æ—â—å": "üÜò –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏"
    }
    
    response = responses.get(user_message.lower(), 
        f"üìù –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {user_message}\n\nü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø –ø–æ–ª—É—á–∏–ª –µ–≥–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª.")
    
    await update.message.reply_text(response)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç {user_id}")
    
    response = (
        "üì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞!</b>\n\n"
        "üîç –Ø –≤–∏–∂—É, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"
        "ü§ñ –í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö —è —Å–º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ!\n\n"
        "üí° –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ."
    )
    
    await update.message.reply_text(
        response,
        parse_mode=ParseMode.HTML
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

# FastAPI –º–∞—Ä—à—Ä—É—Ç—ã
@app.get("/")
async def root():
    return {
        "status": "running",
        "bot": "UMBB GPT Bot",
        "version": "2.0",
        "webhook_configured": bool(bot_application)
    }

@app.get("/health")
async def health():
    return {"status": "healthy", "timestamp": int(time.time())}

@app.post("/webhook")
async def webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        json_data = await request.json()
        update = Update.de_json(json_data, bot_application.bot)
        await bot_application.process_update(update)
        return JSONResponse({"status": "ok"})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return JSONResponse({"status": "error", "message": str(e)}, status_code=500)

async def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ webhook"""
    global bot_application
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
        bot_application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        bot_application.add_handler(CommandHandler("start", start_command))
        bot_application.add_handler(CommandHandler("help", help_command))
        bot_application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        bot_application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        await bot_application.initialize()
        await bot_application.start()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
        webhook_url = f"{WEBHOOK_URL}/webhook"
        await bot_application.bot.set_webhook(webhook_url)
        
        logger.info(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        logger.info(f"üîó Webhook URL: {webhook_url}")
        logger.info(f"ü§ñ Bot username: @{(await bot_application.bot.get_me()).username}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ UMBB GPT Bot v2.0")
    logger.info(f"üîß –ü–æ—Ä—Ç: {PORT}")
    logger.info(f"üåê Webhook URL: {WEBHOOK_URL}")
    logger.info(f"üîë –¢–æ–∫–µ–Ω: {TELEGRAM_BOT_TOKEN[:10]}...")
    
    try:
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –±–æ—Ç–∞
        import asyncio
        
        async def startup():
            await setup_bot()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ event loop –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(startup())
        
        # –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞
        uvicorn.run(
            app,
            host="0.0.0.0",
            port=PORT,
            log_level="info"
        )
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        if bot_application:
            loop = asyncio.get_event_loop()
            loop.run_until_complete(bot_application.stop())
            loop.run_until_complete(bot_application.shutdown())
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()