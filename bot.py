#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
UMBB GPT Telegram Bot
–° –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞ –∏ fallback –Ω–∞ HTTP —Å–µ—Ä–≤–µ—Ä
"""

import os
import sys
from http.server import HTTPServer, BaseHTTPRequestHandler
import json
from urllib.parse import parse_qs

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
try:
    from loguru import logger
except ImportError:
    import logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ telegram –º–æ–¥—É–ª–µ–π
TELEGRAM_AVAILABLE = False
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
    TELEGRAM_AVAILABLE = True
    logger.info("‚úÖ Telegram –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    logger.warning(f"‚ùå telegram –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    logger.info("üîÑ –†–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    logger.warning("python-dotenv –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
PORT = int(os.getenv('PORT', 10000))

class SimpleHandler(BaseHTTPRequestHandler):
    """HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è fallback —Ä–µ–∂–∏–º–∞"""
    
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            
            status = "‚úÖ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω" if TELEGRAM_AVAILABLE and BOT_TOKEN else "‚ö†Ô∏è HTTP —Å–µ—Ä–≤–µ—Ä (fallback)"
            
            html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>UMBB Bot Server</title>
                <meta charset="utf-8">
            </head>
            <body>
                <h1>ü§ñ UMBB Bot Server</h1>
                <p>{status}</p>
                <p>üêç Python: {sys.version}</p>
                <p>üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}</p>
                <p>üîß Telegram –¥–æ—Å—Ç—É–ø–µ–Ω: {TELEGRAM_AVAILABLE}</p>
                <p>üîë Bot Token: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if BOT_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
            </body>
            </html>
            """
            
            self.wfile.write(html.encode('utf-8'))
        else:
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        logger.info(f"{self.address_string()} - {format % args}")

# Telegram bot —Ñ—É–Ω–∫—Ü–∏–∏
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_text = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø UMBB GPT Bot!

üìù –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç - —è –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ GPT
üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é
‚ùì /help - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    """
    
    keyboard = [
        [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="text_mode")],
        [InlineKeyboardButton("üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="image_mode")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
ü§ñ UMBB GPT Bot - –ö–æ–º–∞–Ω–¥—ã:

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å
‚Ä¢ –Ø –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ GPT

üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ
‚Ä¢ –Ø –æ–ø–∏—à—É —á—Ç–æ –Ω–∞ –Ω–µ–º
    """
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_text = update.message.text
    user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (–±–µ–∑ OpenAI –ø–æ–∫–∞)
    response = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –¢—ã –Ω–∞–ø–∏—Å–∞–ª: '{user_text}'\n\nü§ñ –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç GPT –æ—Ç–≤–µ—Ç!"
    
    await update.message.reply_text(response)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    await update.message.reply_text("üñºÔ∏è –ü–æ–ª—É—á–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–ª—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ GPT Vision.")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "text_mode":
        await query.edit_message_text("üìù –†–µ–∂–∏–º —Ç–µ–∫—Å—Ç–∞ –∞–∫—Ç–∏–≤–µ–Ω! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
    elif query.data == "image_mode":
        await query.edit_message_text("üñºÔ∏è –†–µ–∂–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–∫—Ç–∏–≤–µ–Ω! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ.")
    elif query.data == "help":
        await help_command(query, context)

def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        app.add_handler(CallbackQueryHandler(button_callback))
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫ —Å webhook –¥–ª—è Render
        if os.getenv('RENDER'):
            # Webhook —Ä–µ–∂–∏–º –¥–ª—è Render
            app.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                webhook_url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}"
            )
        else:
            # Polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            app.run_polling()
            
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
        return False

def run_http_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ (fallback)"""
    try:
        server = HTTPServer(('0.0.0.0', PORT), SimpleHandler)
        logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        server.serve_forever()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ UMBB Bot...")
    logger.info(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    logger.info(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
    if TELEGRAM_AVAILABLE:
        logger.info("ü§ñ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞...")
        if run_telegram_bot():
            return
    
    # Fallback –Ω–∞ HTTP —Å–µ—Ä–≤–µ—Ä
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞")
    run_http_server()

if __name__ == "__main__":
    main()