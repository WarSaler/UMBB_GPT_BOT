#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram Bot —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Webhooks –¥–ª—è Render
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç FastAPI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import os
import asyncio
import logging
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
    logger.info("‚úÖ python-dotenv –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError:
    logger.warning("python-dotenv –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
try:
    import uvicorn
    from fastapi import FastAPI, Request, HTTPException
    from fastapi.responses import PlainTextResponse, HTMLResponse
    fastapi_available = True
    logger.info("‚úÖ FastAPI –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    fastapi_available = False
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FastAPI: {e}")

# –ò–º–ø–æ—Ä—Ç Telegram –º–æ–¥—É–ª–µ–π
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
    telegram_available = True
    logger.info("‚úÖ Telegram –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    telegram_available = False
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ telegram: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è
    Update = None
    InlineKeyboardButton = None
    InlineKeyboardMarkup = None
    Application = None
    CommandHandler = None
    MessageHandler = None
    CallbackQueryHandler = None
    ContextTypes = None
    filters = None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN') or os.getenv('BOT_TOKEN')
PORT = int(os.getenv('PORT', 10000))
WEBHOOK_URL = os.getenv('RENDER_EXTERNAL_URL', f'https://umbb-gpt-bot.onrender.com')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
if telegram_available and Application:
    telegram_app: Optional[Application] = None
else:
    telegram_app = None

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if fastapi_available:
    app = FastAPI(title="Telegram Bot Webhook")
else:
    app = None

# FastAPI endpoints (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ FastAPI –¥–æ—Å—Ç—É–ø–µ–Ω)
if fastapi_available and app:
    @app.get("/")
    async def root():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        return HTMLResponse(content=f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Telegram Bot Status</title>
            <meta charset="utf-8">
        </head>
        <body>
            <h1>ü§ñ Telegram Bot Server</h1>
            <p>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {PORT}</p>
            <p>–°—Ç–∞—Ç—É—Å Telegram: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if telegram_available else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}</p>
            <p>–°—Ç–∞—Ç—É—Å FastAPI: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if fastapi_available else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}</p>
            <p>–¢–æ–∫–µ–Ω: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if BOT_TOKEN else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}</p>
            <p>Webhook URL: {WEBHOOK_URL}</p>
        </body>
        </html>
        """)

    @app.get("/health")
    @app.get("/healthcheck")
    async def health_check():
        """Health check endpoint –¥–ª—è Render"""
        return PlainTextResponse("OK - Bot is running")

    @app.post("/webhook")
    async def webhook(request: Request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
        if not telegram_available or not telegram_app:
            raise HTTPException(status_code=503, detail="Telegram bot not available")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
            json_data = await request.json()
            
            # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç
            update = Update.de_json(json_data, telegram_app.bot)
            
            # –î–æ–±–∞–≤–ª—è–µ–º update –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await telegram_app.update_queue.put(update)
            
            return {"status": "ok"}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            raise HTTPException(status_code=500, detail=str(e))

# Telegram Bot —Ñ—É–Ω–∫—Ü–∏–∏
if telegram_available:
    async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data='help')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data='status')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_message = f"""
ü§ñ **–ü—Ä–∏–≤–µ—Ç, {user.first_name}!**

–Ø - —Ç–≤–æ–π Telegram –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
‚Ä¢ üìù –û–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ üì∏ –ê–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
‚Ä¢ üîó Webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

üí° –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!
        """
        
        await update.message.reply_text(
            welcome_message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üÜò **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üìù **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ!
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_text = update.message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.username}: {user_text}")
        
        response = f"üì® –ü–æ–ª—É—á–∏–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ: '{user_text}'\n\n"
        response += "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é... (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
        
        await update.message.reply_text(response)

    async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç {update.effective_user.username}")
        
        await update.message.reply_text(
            "üì∏ –ü–æ–ª—É—á–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!\n\n"
            "üîÑ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
        )

    async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'help':
            await query.edit_message_text(
                "üÜò **–ü–æ–º–æ—â—å**\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å:\n"
                "‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                "‚Ä¢ üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
                "‚Ä¢ üîò –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                parse_mode='Markdown'
            )
        elif query.data == 'status':
            await query.edit_message_text(
                "üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**\n\n"
                "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                "üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n"
                "‚ö° –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤",
                parse_mode='Markdown'
            )

async def setup_telegram_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞ —Å webhook"""
    global telegram_app
    
    if not BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    if not telegram_available:
        logger.error("‚ùå Telegram –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
        return False
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ updater (–¥–ª—è webhook)
        telegram_app = Application.builder().token(BOT_TOKEN).updater(None).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        telegram_app.add_handler(CommandHandler("start", start_command))
        telegram_app.add_handler(CommandHandler("help", help_command))
        telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        telegram_app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        telegram_app.add_handler(CallbackQueryHandler(button_callback))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await telegram_app.initialize()
        await telegram_app.start()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
        webhook_url = f"{WEBHOOK_URL}/webhook"
        await telegram_app.bot.set_webhook(
            url=webhook_url,
            allowed_updates=["message", "callback_query"]
        )
        
        logger.info(f"‚úÖ Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å webhook: {webhook_url}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞: {e}")
        return False

async def run_server():
    """–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
    if not fastapi_available:
        logger.error("‚ùå FastAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
    await setup_telegram_bot()
    
    # –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞
    config = uvicorn.Config(
        app=app,
        host="0.0.0.0",
        port=PORT,
        log_level="info"
    )
    server = uvicorn.Server(config)
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    await server.serve()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å webhook –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π...")
    
    if not fastapi_available:
        logger.error("‚ùå FastAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install fastapi uvicorn")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –±–µ–∑ FastAPI
        import http.server
        import socketserver
        
        class SimpleHandler(http.server.BaseHTTPRequestHandler):
            def do_GET(self):
                self.send_response(200)
                self.send_header('Content-type', 'text/html')
                self.end_headers()
                self.wfile.write(b'<h1>Bot Server Running</h1><p>FastAPI not available, but server is running.</p>')
            
            def log_message(self, format, *args):
                logger.info(f"HTTP: {format % args}")
        
        with socketserver.TCPServer(("", PORT), SimpleHandler) as httpd:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
            httpd.serve_forever()
        return
    
    try:
        # –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ —Å Telegram webhook
        asyncio.run(run_server())
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)