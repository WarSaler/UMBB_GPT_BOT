#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢elegram –±–æ—Ç –¥–ª—è Render.com - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É Python
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import json
import logging
import urllib.request
import urllib.parse
import urllib.error
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading
import time
import sys
from datetime import datetime
import base64

# –ò–º–ø–æ—Ä—Ç OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    import openai
    OPENAI_AVAILABLE = True
    print(f"‚úÖ OpenAI —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω. –í–µ—Ä—Å–∏—è: {openai.__version__}")
except ImportError as e:
    OPENAI_AVAILABLE = False
    print(f"‚ùå OpenAI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã.")
except Exception as e:
    OPENAI_AVAILABLE = False
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OpenAI: {e}")
    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'dummy_token')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')
PORT = int(os.getenv('PORT', 10000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', f'https://umbb-gpt-bot.onrender.com')

class TelegramAPI:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Telegram Bot API"""
    
    def __init__(self, token):
        self.token = token
        self.base_url = f'https://api.telegram.org/bot{token}'
    
    def send_message(self, chat_id, text, parse_mode='HTML'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.token == 'dummy_token':
            logger.warning(f"ü§ñ Dummy mode: would send to {chat_id}: {text[:50]}...")
            return {'ok': True, 'result': {'message_id': 1}}
        
        url = f'{self.base_url}/sendMessage'
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': parse_mode
        }
        
        try:
            data_encoded = urllib.parse.urlencode(data).encode('utf-8')
            req = urllib.request.Request(url, data=data_encoded, method='POST')
            req.add_header('Content-Type', 'application/x-www-form-urlencoded')
            
            with urllib.request.urlopen(req, timeout=10) as response:
                result = json.loads(response.read().decode('utf-8'))
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {'ok': False, 'error': str(e)}
    
    def set_webhook(self, webhook_url):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
        if self.token == 'dummy_token':
            logger.warning(f"ü§ñ Dummy mode: would set webhook to {webhook_url}")
            return {'ok': True}
        
        url = f'{self.base_url}/setWebhook'
        data = {'url': webhook_url}
        
        try:
            data_encoded = urllib.parse.urlencode(data).encode('utf-8')
            req = urllib.request.Request(url, data=data_encoded, method='POST')
            req.add_header('Content-Type', 'application/x-www-form-urlencoded')
            
            with urllib.request.urlopen(req, timeout=10) as response:
                result = json.loads(response.read().decode('utf-8'))
                return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            return {'ok': False, 'error': str(e)}

class OpenAIAPI:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API"""
    
    def __init__(self, api_key):
        self.api_key = api_key
        if OPENAI_AVAILABLE and api_key:
            openai.api_key = api_key
    
    def is_available(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI API"""
        return OPENAI_AVAILABLE and bool(self.api_key)
    
    def generate_text_response(self, user_message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not self.is_available():
            return self._get_fallback_response(user_message)
        
        try:
            client = openai.OpenAI(api_key=self.api_key)
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç UMBB GPT Bot. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º."},
                    {"role": "user", "content": user_message}
                ],
                max_tokens=1000,
                temperature=0.7
            )
            return response.choices[0].message.content
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
            return self._get_fallback_response(user_message)
    
    def analyze_image(self, image_url, user_message="–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"):
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI Vision API"""
        if not self.is_available():
            return "üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API."
        
        try:
            client = openai.OpenAI(api_key=self.api_key)
            response = client.chat.completions.create(
                model="gpt-4-vision-preview",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ: {user_message}"},
                            {"type": "image_url", "image_url": {"url": image_url}}
                        ]
                    }
                ],
                max_tokens=1000
            )
            return response.choices[0].message.content
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}"
    
    def _get_fallback_response(self, user_message):
        """–ë–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ –ò–ò"""
        responses = {
            "–ø–æ–≥–æ–¥–∞": "üå§Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–≥–æ–¥—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Å—Ç–Ω—ã–µ –º–µ—Ç–µ–æ—Å–≤–æ–¥–∫–∏ –∏–ª–∏ –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.",
            "–Ω–æ–≤–æ—Å—Ç–∏": "üì∞ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞–¥–µ–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.",
            "–≤—Ä–µ–º—è": f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}",
            "–ø—Ä–∏–≤–µ—Ç": "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            "–∫–∞–∫ –¥–µ–ª–∞": "üòä –£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
            "—Å–ø–∞—Å–∏–±–æ": "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!"
        }
        
        user_lower = user_message.lower()
        for key, response in responses.items():
            if key in user_lower:
                return response
        
        return f"ü§ñ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{user_message}'. \n\nüí° –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ò–ò –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å OpenAI API –∫–ª—é—á."

class WebhookHandler(BaseHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è webhook"""
    
    def __init__(self, *args, **kwargs):
        self.bot_token = BOT_TOKEN
        self.port = PORT
        self.webhook_url = WEBHOOK_URL
        super().__init__(*args, **kwargs)
    
    def log_message(self, format, *args):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞ –≤ –ª–æ–≥–∞—Ö"""
        logger.info(f"HTTP: {format % args}")
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            
            html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>ü§ñ UMBB GPT Bot</title>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
                    .container {{ max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                    .status {{ padding: 15px; border-radius: 5px; margin: 15px 0; }}
                    .success {{ background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }}
                    .warning {{ background: #fff3cd; color: #856404; border: 1px solid #ffeaa7; }}
                    .error {{ background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }}
                    .info {{ background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }}
                    h1 {{ color: #333; text-align: center; }}
                    .timestamp {{ font-size: 0.9em; color: #666; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>ü§ñ UMBB GPT Bot Status</h1>
                    
                    <div class="status success">
                        <strong>‚úÖ HTTP –°–µ—Ä–≤–µ—Ä:</strong> –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {self.port}
                    </div>
                    
                    <div class="status {'success' if self.bot_token != 'dummy_token' else 'error'}">
                        <strong>{'‚úÖ' if self.bot_token != 'dummy_token' else '‚ùå'} Telegram Token:</strong> 
                        {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if self.bot_token != 'dummy_token' else '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}
                        {'' if self.bot_token != 'dummy_token' else '<br><small>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ Render Dashboard</small>'}
                    </div>
                    
                    <div class="status info">
                        <strong>üîó Webhook URL:</strong> {self.webhook_url}/webhook
                    </div>
                    
                    <div class="status {'success' if OPENAI_AVAILABLE else 'warning'}">
                        <strong>üß† OpenAI API:</strong> 
                        {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if OPENAI_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
                        {f' (–∫–ª—é—á: {"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if OPENAI_API_KEY and len(OPENAI_API_KEY) > 10 else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"})' if OPENAI_AVAILABLE else ''}
                    </div>
                    
                    <div class="status info">
                        <strong>üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</strong><br>
                        ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞<br>
                        ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏<br>
                        ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                    </div>
                    
                    <div class="timestamp">
                        –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
                    </div>
                </div>
            </body>
            </html>
            """
            
            self.wfile.write(html.encode('utf-8'))
            
        elif self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            health_data = {
                'status': 'healthy',
                'bot_token_set': self.bot_token != 'dummy_token',
                'webhook_url': f'{self.webhook_url}/webhook'
            }
            
            self.wfile.write(json.dumps(health_data, ensure_ascii=False).encode('utf-8'))
            
        elif self.path == '/diagnostics':
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π endpoint
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            diagnostics_data = {
                'bot_status': 'running',
                'bot_token_set': BOT_TOKEN != 'dummy_token',
                'openai_available': OPENAI_AVAILABLE,
                'openai_key_set': bool(OPENAI_API_KEY and len(OPENAI_API_KEY) > 10),
                'webhook_url': f'{WEBHOOK_URL}/webhook',
                'port': PORT,
                'python_version': sys.version,
                'timestamp': datetime.now().isoformat()
            }
            
            self.wfile.write(json.dumps(diagnostics_data, ensure_ascii=False, indent=2).encode('utf-8'))
            
        else:
            self.send_response(404)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'Not Found')
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ (webhook)"""
        if self.path == '/webhook':
            try:
                content_length = int(self.headers.get('Content-Length', 0))
                post_data = self.rfile.read(content_length)
                
                if content_length > 0:
                    update_data = json.loads(post_data.decode('utf-8'))
                    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: {json.dumps(update_data, ensure_ascii=False)[:200]}...")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    threading.Thread(
                        target=self.process_telegram_update,
                        args=(update_data,),
                        daemon=True
                    ).start()
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(b'{"ok": true}')
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'ok': False, 'error': str(e)}).encode('utf-8'))
        else:
            self.send_response(404)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'Not Found')
    
    def process_telegram_update(self, update_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        try:
            telegram_api = TelegramAPI(BOT_TOKEN)
            openai_api = OpenAIAPI(OPENAI_API_KEY)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if 'message' in update_data:
                message = update_data['message']
                chat_id = message['chat']['id']
                
                if 'text' in message:
                    text = message['text']
                    logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                    if text == '/start':
                        ai_status = "üß† –ò–ò –∞–∫—Ç–∏–≤–µ–Ω" if openai_api.is_available() else "‚ö†Ô∏è –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–±–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã)"
                        response = (
                            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UMBB GPT Bot!</b>\n\n"
                            "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.\n\n"
                            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                            "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                            "‚Ä¢ /help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n\n"
                            "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
                            "üß† –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é GPT\n"
                            "üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                            "üí¨ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ\n\n"
                            f"<b>–°—Ç–∞—Ç—É—Å –ò–ò:</b> {ai_status}"
                        )
                    elif text == '/help':
                        ai_status = "üß† –ò–ò –∞–∫—Ç–∏–≤–µ–Ω" if openai_api.is_available() else "‚ö†Ô∏è –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                        response = (
                            "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
                            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                            "‚Ä¢ /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
                            "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                            "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
                            "üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é GPT-3.5\n"
                            "üîç –ê–Ω–∞–ª–∏–∑ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                            "üí¨ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n"
                            "üåê –†–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook –Ω–∞ Render\n\n"
                            f"<b>–°—Ç–∞—Ç—É—Å –ò–ò:</b> {ai_status}\n"
                            "<b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b> ‚úÖ –û–Ω–ª–∞–π–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
                        )
                    else:
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
                        logger.info(f"üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è: {text}")
                        response = openai_api.generate_text_response(text)
                    
                    telegram_api.send_message(chat_id, response)
                
                elif 'photo' in message:
                    logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {chat_id}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
                    photo = message['photo'][-1]  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ - —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ
                    file_id = photo['file_id']
                    
                    # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Telegram API
                    try:
                        file_info = self.get_file_info(file_id)
                        if file_info and 'file_path' in file_info:
                            file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info['file_path']}"
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ò–ò
                            caption = message.get('caption', '–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ')
                            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {caption}")
                            
                            response = openai_api.analyze_image(file_url, caption)
                        else:
                            response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                        response = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
                    
                    telegram_api.send_message(chat_id, response)
                
                else:
                    logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {chat_id}")
                    response = (
                        "ü§î <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
                        "–Ø –ø–æ–∫–∞ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /help"
                    )
                    telegram_api.send_message(chat_id, response)
            
            else:
                logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {list(update_data.keys())}")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def get_file_info(self, file_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –æ—Ç Telegram API"""
        if BOT_TOKEN == 'dummy_token':
            logger.warning(f"ü§ñ Dummy mode: would get file info for {file_id}")
            return None
        
        url = f'https://api.telegram.org/bot{BOT_TOKEN}/getFile'
        data = {'file_id': file_id}
        
        try:
            data_encoded = urllib.parse.urlencode(data).encode('utf-8')
            req = urllib.request.Request(url, data=data_encoded, method='POST')
            req.add_header('Content-Type', 'application/x-www-form-urlencoded')
            
            with urllib.request.urlopen(req, timeout=10) as response:
                result = json.loads(response.read().decode('utf-8'))
                if result.get('ok'):
                    return result.get('result')
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {result}")
                    return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∞–π–ª–∞: {e}")
            return None

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if BOT_TOKEN == 'dummy_token':
        logger.critical(
            "\n" + "="*60 + "\n"
            "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "1. –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –æ—Ç @BotFather –≤ Telegram\n"
            "2. –ó–∞–π—Ç–∏ –≤ Render Dashboard\n"
            "3. –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞\n"
            "4. –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n"
            "   –ò–º—è: TELEGRAM_BOT_TOKEN\n"
            "   –ó–Ω–∞—á–µ–Ω–∏–µ: –≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_botfather\n"
            "5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å\n\n"
            "–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ RENDER_SETUP.md\n"
            + "="*60
        )
        return False
    
    telegram_api = TelegramAPI(BOT_TOKEN)
    webhook_url = f'{WEBHOOK_URL}/webhook'
    
    logger.info(f"üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: {webhook_url}")
    logger.info(f"üîë –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...{BOT_TOKEN[-4:] if len(BOT_TOKEN) > 14 else '****'}")
    
    result = telegram_api.set_webhook(webhook_url)
    
    if result.get('ok'):
        logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return True
    else:
        error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {error_msg}")
        logger.error("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.error("   ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        logger.error("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
        logger.error("   ‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API")
        return False

def run_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
    server = HTTPServer(('0.0.0.0', PORT), WebhookHandler)
    logger.info(f"üöÄ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    webhook_thread = threading.Thread(target=setup_webhook, daemon=True)
    webhook_thread.start()
    
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        server.shutdown()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ UMBB GPT Bot (–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    logger.info(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    logger.info(f"   ‚Ä¢ –ü–æ—Ä—Ç: {PORT}")
    logger.info(f"   ‚Ä¢ Webhook URL: {WEBHOOK_URL}")
    logger.info(f"   ‚Ä¢ –¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'‚úÖ –î–∞' if BOT_TOKEN != 'dummy_token' else '‚ùå –ù–ï–¢'}")
    logger.info(f"   ‚Ä¢ Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ OpenAI API
    logger.info(f"üß† OpenAI API —Å—Ç–∞—Ç—É—Å: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if OPENAI_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    if OPENAI_API_KEY:
        logger.info(f"üîë OpenAI API –∫–ª—é—á: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if len(OPENAI_API_KEY) > 10 else '‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π'}")
    else:
        logger.warning("üîë OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    
    try:
        run_server()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == '__main__':
    main()