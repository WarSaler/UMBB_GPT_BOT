#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram Bot –¥–ª—è Render —Å webhook –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç python-telegram-bot –∏ FastAPI
"""

import os
import asyncio
import logging
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ python-dotenv
try:
    from dotenv import load_dotenv
    load_dotenv()
    logger.info("‚úÖ python-dotenv –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError:
    logger.warning("python-dotenv –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FastAPI
try:
    from fastapi import FastAPI, Request
    import uvicorn
    fastapi_available = True
    logger.info("‚úÖ FastAPI –∏ uvicorn —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FastAPI: {e}")
    fastapi_available = False
    FastAPI = None
    uvicorn = None

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ telegram
try:
    from telegram import Update, Bot
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
    telegram_available = True
    logger.info("‚úÖ Telegram –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ telegram: {e}")
    telegram_available = False
    Update = None
    Bot = None
    Application = None
    CommandHandler = None
    MessageHandler = None
    filters = None
    CallbackQueryHandler = None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN') or os.getenv('BOT_TOKEN')
PORT = int(os.getenv('PORT', 10000))
WEBHOOK_URL = os.getenv('RENDER_EXTERNAL_URL', 'https://umbb-gpt-bot.onrender.com')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
telegram_app: Optional[Application] = None
fastapi_app: Optional[FastAPI] = None

# Telegram bot —Ñ—É–Ω–∫—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ telegram –¥–æ—Å—Ç—É–ø–µ–Ω)
if telegram_available:
    async def start_command(update: Update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø UMBB GPT Bot.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ!\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - –ü–æ–º–æ—â—å"
        )

    async def help_command(update: Update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(
            "üÜò –ü–æ–º–æ—â—å:\n\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç - –ø–æ–ª—É—á–∏—à—å –æ—Ç–≤–µ—Ç –æ—Ç GPT\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ - –ø–æ–ª—É—á–∏—à—å –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ /start - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
            "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )

    async def handle_message(update: Update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")
        
        # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å –ø–æ–º–æ—â—å—é OpenAI API)
        response = f"–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}\n\n–≠—Ç–æ –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç. –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ OpenAI API."
        
        await update.message.reply_text(response)

    async def handle_photo(update: Update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ")
        
        response = "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–¥–∫–ª—é—á–∏—Ç–µ OpenAI Vision API."
        
        await update.message.reply_text(response)

    async def button_callback(update: Update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ: {query.data}")

def setup_telegram_bot() -> Optional[Application]:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    if not telegram_available:
        logger.error("‚ùå Telegram –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return None
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        app.add_handler(CallbackQueryHandler(button_callback))
        
        logger.info("‚úÖ Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return app
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞: {e}")
        return None

def setup_fastapi() -> Optional[FastAPI]:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if not fastapi_available:
        logger.error("‚ùå FastAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return None
    
    try:
        app = FastAPI(title="UMBB GPT Bot", version="1.0.0")
        
        @app.get("/")
        async def root():
            return {
                "status": "ok",
                "message": "UMBB GPT Bot —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "telegram_available": telegram_available,
                "fastapi_available": fastapi_available
            }
        
        @app.get("/health")
        async def health():
            return {"status": "healthy"}
        
        if telegram_available and telegram_app:
            @app.post("/webhook")
            async def webhook(request: Request):
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
                try:
                    json_data = await request.json()
                    update = Update.de_json(json_data, telegram_app.bot)
                    await telegram_app.process_update(update)
                    return {"status": "ok"}
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
                    return {"status": "error", "message": str(e)}
        
        logger.info("‚úÖ FastAPI –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return app
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ FastAPI: {e}")
        return None

async def setup_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è Telegram"""
    if not telegram_available or not telegram_app:
        logger.error("‚ùå Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
        return False
    
    try:
        webhook_url = f"{WEBHOOK_URL}/webhook"
        await telegram_app.bot.set_webhook(
            url=webhook_url,
            allowed_updates=["message", "callback_query"]
        )
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return False

def run_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    if not fastapi_available:
        logger.error("‚ùå FastAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install fastapi uvicorn")
        # –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ fallback
        from http.server import HTTPServer, BaseHTTPRequestHandler
        
        class SimpleHandler(BaseHTTPRequestHandler):
            def do_GET(self):
                self.send_response(200)
                self.send_header('Content-type', 'text/html')
                self.end_headers()
                self.wfile.write(b'<h1>UMBB GPT Bot</h1><p>FastAPI unavailable, using simple server</p>')
            
            def log_message(self, format, *args):
                logger.info(f"HTTP: {format % args}")
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        server = HTTPServer(('0.0.0.0', PORT), SimpleHandler)
        server.serve_forever()
        return
    
    try:
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        uvicorn.run(
            fastapi_app,
            host="0.0.0.0",
            port=PORT,
            log_level="info"
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global telegram_app, fastapi_app
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å webhook –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    telegram_app = setup_telegram_bot()
    fastapi_app = setup_fastapi()
    
    if telegram_app:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        await telegram_app.initialize()
        await telegram_app.start()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
        await setup_webhook()
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    run_server()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")