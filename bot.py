#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢elegram –±–æ—Ç –¥–ª—è Render.com - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É Python
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import json
import logging
import urllib.request
import urllib.parse
import urllib.error
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading
import time
import sys
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'dummy_token')
PORT = int(os.getenv('PORT', 10000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', f'https://umbb-gpt-bot.onrender.com')

class TelegramAPI:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Telegram Bot API"""
    
    def __init__(self, token):
        self.token = token
        self.base_url = f'https://api.telegram.org/bot{token}'
    
    def send_message(self, chat_id, text, parse_mode='HTML'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.token == 'dummy_token':
            logger.warning(f"ü§ñ Dummy mode: would send to {chat_id}: {text[:50]}...")
            return {'ok': True, 'result': {'message_id': 1}}
        
        url = f'{self.base_url}/sendMessage'
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': parse_mode
        }
        
        try:
            data_encoded = urllib.parse.urlencode(data).encode('utf-8')
            req = urllib.request.Request(url, data=data_encoded, method='POST')
            req.add_header('Content-Type', 'application/x-www-form-urlencoded')
            
            with urllib.request.urlopen(req, timeout=10) as response:
                result = json.loads(response.read().decode('utf-8'))
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {'ok': False, 'error': str(e)}
    
    def set_webhook(self, webhook_url):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
        if self.token == 'dummy_token':
            logger.warning(f"ü§ñ Dummy mode: would set webhook to {webhook_url}")
            return {'ok': True}
        
        url = f'{self.base_url}/setWebhook'
        data = {'url': webhook_url}
        
        try:
            data_encoded = urllib.parse.urlencode(data).encode('utf-8')
            req = urllib.request.Request(url, data=data_encoded, method='POST')
            req.add_header('Content-Type', 'application/x-www-form-urlencoded')
            
            with urllib.request.urlopen(req, timeout=10) as response:
                result = json.loads(response.read().decode('utf-8'))
                return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            return {'ok': False, 'error': str(e)}

class WebhookHandler(BaseHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è webhook"""
    
    def log_message(self, format, *args):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞ –≤ –ª–æ–≥–∞—Ö"""
        logger.info(f"HTTP: {format % args}")
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            
            html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>ü§ñ UMBB GPT Bot</title>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
                    .container {{ max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                    .status {{ padding: 15px; border-radius: 5px; margin: 15px 0; }}
                    .success {{ background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }}
                    .warning {{ background: #fff3cd; color: #856404; border: 1px solid #ffeaa7; }}
                    .error {{ background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }}
                    .info {{ background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }}
                    h1 {{ color: #333; text-align: center; }}
                    .timestamp {{ font-size: 0.9em; color: #666; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>ü§ñ UMBB GPT Bot Status</h1>
                    
                    <div class="status success">
                        <strong>‚úÖ HTTP –°–µ—Ä–≤–µ—Ä:</strong> –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {PORT}
                    </div>
                    
                    <div class="status {'success' if BOT_TOKEN != 'dummy_token' else 'error'}">
                        <strong>{'‚úÖ' if BOT_TOKEN != 'dummy_token' else '‚ùå'} Telegram Token:</strong> 
                        {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if BOT_TOKEN != 'dummy_token' else '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}
                        {'' if BOT_TOKEN != 'dummy_token' else '<br><small>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ Render Dashboard</small>'}
                    </div>
                    
                    <div class="status info">
                        <strong>üîó Webhook URL:</strong> {WEBHOOK_URL}/webhook
                    </div>
                    
                    <div class="status info">
                        <strong>üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</strong><br>
                        ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞<br>
                        ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏<br>
                        ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                    </div>
                    
                    <div class="timestamp">
                        –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
                    </div>
                </div>
            </body>
            </html>
            """
            
            self.wfile.write(html.encode('utf-8'))
            
        elif self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            health_data = {
                'status': 'ok',
                'timestamp': datetime.now().isoformat(),
                'bot_token_configured': BOT_TOKEN != 'dummy_token',
                'webhook_url': f'{WEBHOOK_URL}/webhook',
                'port': PORT
            }
            
            self.wfile.write(json.dumps(health_data, ensure_ascii=False).encode('utf-8'))
            
        else:
            self.send_response(404)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'Not Found')
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ (webhook)"""
        if self.path == '/webhook':
            try:
                content_length = int(self.headers.get('Content-Length', 0))
                post_data = self.rfile.read(content_length)
                
                if content_length > 0:
                    update_data = json.loads(post_data.decode('utf-8'))
                    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: {json.dumps(update_data, ensure_ascii=False)[:200]}...")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    threading.Thread(
                        target=self.process_telegram_update,
                        args=(update_data,),
                        daemon=True
                    ).start()
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(b'{"ok": true}')
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'ok': False, 'error': str(e)}).encode('utf-8'))
        else:
            self.send_response(404)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'Not Found')
    
    def process_telegram_update(self, update_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        try:
            telegram_api = TelegramAPI(BOT_TOKEN)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if 'message' in update_data:
                message = update_data['message']
                chat_id = message['chat']['id']
                
                if 'text' in message:
                    text = message['text']
                    logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                    if text == '/start':
                        response = (
                            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UMBB GPT Bot!</b>\n\n"
                            "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.\n\n"
                            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                            "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                            "‚Ä¢ /help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n\n"
                            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!"
                        )
                    elif text == '/help':
                        response = (
                            "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
                            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                            "‚Ä¢ /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
                            "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                            "<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
                            "‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                            "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
                            "‚Ä¢ –†–∞–±–æ—Ç–∞—é —á–µ—Ä–µ–∑ webhook –Ω–∞ Render\n\n"
                            "<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –û–Ω–ª–∞–π–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
                        )
                    else:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                        responses = [
                            f"ü§ñ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}'",
                            f"üìù –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
                            f"üí¨ –û—Ç–≤–µ—á–∞—é –Ω–∞ '{text}': –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
                            f"üéØ –°–æ–æ–±—â–µ–Ω–∏–µ '{text}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
                            f"‚ú® –í–∞—à —Ç–µ–∫—Å—Ç '{text}' –ø—Ä–∏–Ω—è—Ç –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ!"
                        ]
                        import random
                        response = random.choice(responses)
                    
                    telegram_api.send_message(chat_id, response)
                
                elif 'photo' in message:
                    logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {chat_id}")
                    response = (
                        "üì∏ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞!</b>\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. "
                        "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –º–æ–≥—É —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ.\n\n"
                        "üîÑ <i>–§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.</i>"
                    )
                    telegram_api.send_message(chat_id, response)
                
                else:
                    logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {chat_id}")
                    response = (
                        "ü§î <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
                        "–Ø –ø–æ–∫–∞ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /help"
                    )
                    telegram_api.send_message(chat_id, response)
            
            else:
                logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {list(update_data.keys())}")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if BOT_TOKEN == 'dummy_token':
        logger.critical(
            "\n" + "="*60 + "\n"
            "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "1. –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –æ—Ç @BotFather –≤ Telegram\n"
            "2. –ó–∞–π—Ç–∏ –≤ Render Dashboard\n"
            "3. –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞\n"
            "4. –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n"
            "   –ò–º—è: TELEGRAM_BOT_TOKEN\n"
            "   –ó–Ω–∞—á–µ–Ω–∏–µ: –≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_botfather\n"
            "5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å\n\n"
            "–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ RENDER_SETUP.md\n"
            + "="*60
        )
        return False
    
    telegram_api = TelegramAPI(BOT_TOKEN)
    webhook_url = f'{WEBHOOK_URL}/webhook'
    
    logger.info(f"üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: {webhook_url}")
    logger.info(f"üîë –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...{BOT_TOKEN[-4:] if len(BOT_TOKEN) > 14 else '****'}")
    
    result = telegram_api.set_webhook(webhook_url)
    
    if result.get('ok'):
        logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return True
    else:
        error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {error_msg}")
        logger.error("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.error("   ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        logger.error("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
        logger.error("   ‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API")
        return False

def run_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
    server = HTTPServer(('0.0.0.0', PORT), WebhookHandler)
    logger.info(f"üöÄ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    webhook_thread = threading.Thread(target=setup_webhook, daemon=True)
    webhook_thread.start()
    
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        server.shutdown()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ UMBB GPT Bot (–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    logger.info(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    logger.info(f"   ‚Ä¢ –ü–æ—Ä—Ç: {PORT}")
    logger.info(f"   ‚Ä¢ Webhook URL: {WEBHOOK_URL}")
    logger.info(f"   ‚Ä¢ –¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'‚úÖ –î–∞' if BOT_TOKEN != 'dummy_token' else '‚ùå –ù–ï–¢'}")
    logger.info(f"   ‚Ä¢ Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    
    try:
        run_server()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == '__main__':
    main()