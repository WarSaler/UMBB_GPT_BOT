#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è Telegram Bot
"""

import os
import asyncio
import logging
from io import BytesIO
from typing import Optional, Dict, Any

# –ò–º–ø–æ—Ä—Ç telegram –º–æ–¥—É–ª–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import (
        Application, CommandHandler, MessageHandler, CallbackQueryHandler,
        filters, ContextTypes
    )
    from telegram.constants import ParseMode
    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∏–º–ø–æ—Ä—Ç telegram –º–æ–¥—É–ª–µ–π")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ telegram: {e}")
    raise

# –ò–º–ø–æ—Ä—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from loguru import logger
except ImportError:
    import logging
    logger = logging.getLogger(__name__)
    logger.info = print
    logger.error = print
    logger.warning = print

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
try:
    from openai_handler_minimal import get_openai_handler
except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å openai_handler_minimal: {e}")
    def get_openai_handler():
        return None

try:
    from ocr_handler_minimal import get_ocr_handler
except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ocr_handler_minimal: {e}")
    def get_ocr_handler():
        return None

try:
    from translator_minimal import get_translation_handler
except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å translator_minimal: {e}")
    def get_translation_handler():
        return None

class TelegramBot:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        print(f"üîë Bot token –Ω–∞–π–¥–µ–Ω: {self.bot_token[:10]}...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        try:
            self.openai_handler = get_openai_handler()
            print(f"ü§ñ OpenAI handler: {'‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' if self.openai_handler else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI handler: {e}")
            self.openai_handler = None
            
        try:
            self.ocr_handler = get_ocr_handler()
            print(f"üëÅÔ∏è OCR handler: {'‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' if self.ocr_handler else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OCR handler: {e}")
            self.ocr_handler = None
            
        try:
            self.translation_handler = get_translation_handler()
            print(f"üåê Translation handler: {'‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' if self.translation_handler else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Translation handler: {e}")
            self.translation_handler = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.max_image_size = int(os.getenv('MAX_IMAGE_SIZE', '10485760'))  # 10MB
        self.supported_formats = os.getenv('SUPPORTED_IMAGE_FORMATS', 'jpg,jpeg,png,bmp,tiff,webp').split(',')
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.user_settings = {}
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try:
            self.application = Application.builder().token(self.bot_token).build()
            self._setup_handlers()
            print("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            raise
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ö–æ–º–∞–Ω–¥—ã
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("settings", self.settings_command))
            self.application.add_handler(CommandHandler("languages", self.languages_command))
            self.application.add_handler(CommandHandler("setlang", self.setlang_command))
            self.application.add_handler(CommandHandler("status", self.status_command))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
            self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
            self.application.add_handler(CallbackQueryHandler(self.handle_callback))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.application.add_error_handler(self.error_handler)
            
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            raise
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = update.effective_user.id
            user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.user_settings:
                self.user_settings[user_id] = {
                    'source_language': 'auto',
                    'target_language': 'en',
                    'ocr_language': 'rus+eng',
                    'use_openai_translation': True,
                    'improve_ocr': True
                }
            
            welcome_text = (
                f"ü§ñ –ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UMBB GPT Bot!\n\n"
                "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:\n"
                "üì∏ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (OCR)\n"
                "üåê –ü–µ—Ä–µ–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞\n"
                "ü§ñ –£–ª—É—á—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\n\n"
                "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/help - –°–ø—Ä–∞–≤–∫–∞\n"
                "/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤\n"
                "/languages - –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤\n\n"
                "üì§ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n"
                "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è\n"
                "‚Ä¢ –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n\n"
                "üöÄ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!"
            )
            
            await update.message.reply_text(welcome_text)
            print(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {user_id})")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤\n"
            "/languages - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤\n"
            "/setlang <–∫–æ–¥> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞\n\n"
            "üì∏ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "üîß **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**\n"
            "JPG, PNG, BMP, TIFF, WebP\n\n"
            "üí° **–°–æ–≤–µ—Ç:** –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ OCR –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º."
        )
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        status_text = (
            "üîç **–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:**\n\n"
            f"ü§ñ OpenAI Handler: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if self.openai_handler else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
            f"üëÅÔ∏è OCR Handler: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if self.ocr_handler else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
            f"üåê Translation Handler: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if self.translation_handler else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.user_settings)}\n"
            f"üíæ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {self.max_image_size // 1024 // 1024} MB\n"
            f"üñºÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(self.supported_formats)}\n\n"
            "üöÄ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!"
        )
        
        await update.message.reply_text(status_text, parse_mode=ParseMode.MARKDOWN)
    
    async def languages_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /languages"""
        languages_text = (
            "üåê **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:**\n\n"
            "üá∑üá∫ `ru` - –†—É—Å—Å–∫–∏–π\n"
            "üá∫üá∏ `en` - English\n"
            "üá©üá™ `de` - Deutsch\n"
            "üá´üá∑ `fr` - Fran√ßais\n"
            "üá™üá∏ `es` - Espa√±ol\n"
            "üáÆüáπ `it` - Italiano\n"
            "üáµüáπ `pt` - Portugu√™s\n"
            "üá®üá≥ `zh` - ‰∏≠Êñá\n"
            "üáØüáµ `ja` - Êó•Êú¨Ë™û\n"
            "üá∞üá∑ `ko` - ÌïúÍµ≠Ïñ¥\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/setlang <–∫–æ–¥>` –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `/setlang en` –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ"
        )
        
        await update.message.reply_text(languages_text, parse_mode=ParseMode.MARKDOWN)
    
    async def setlang_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setlang"""
        user_id = update.effective_user.id
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ —è–∑—ã–∫–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: `/setlang en`\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /languages –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        language_code = context.args[0].lower()
        supported_languages = {
            'ru': '–†—É—Å—Å–∫–∏–π', 'en': 'English', 'de': 'Deutsch',
            'fr': 'Fran√ßais', 'es': 'Espa√±ol', 'it': 'Italiano',
            'pt': 'Portugu√™s', 'zh': '‰∏≠Êñá', 'ja': 'Êó•Êú¨Ë™û', 'ko': 'ÌïúÍµ≠Ïñ¥'
        }
        
        if language_code not in supported_languages:
            await update.message.reply_text(
                f"‚ùå –Ø–∑—ã–∫ `{language_code}` –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /languages –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_settings:
            self.user_settings[user_id] = {}
        
        self.user_settings[user_id]['target_language'] = language_code
        
        await update.message.reply_text(
            f"‚úÖ –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: **{supported_languages[language_code]}** (`{language_code}`)",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        user_id = update.effective_user.id
        settings = self.user_settings.get(user_id, {})
        
        settings_text = (
            "‚öôÔ∏è **–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n\n"
            f"üåê –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞: `{settings.get('target_language', 'en')}`\n"
            f"üîç –Ø–∑—ã–∫ OCR: `{settings.get('ocr_language', 'rus+eng')}`\n"
            f"ü§ñ OpenAI –ø–µ—Ä–µ–≤–æ–¥: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if settings.get('use_openai_translation', True) else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
            f"üìù –£–ª—É—á—à–µ–Ω–∏–µ OCR: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if settings.get('improve_ocr', True) else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n"
            "‚Ä¢ `/setlang <–∫–æ–¥>` - –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞\n"
            "‚Ä¢ `/languages` - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤"
        )
        
        await update.message.reply_text(settings_text, parse_mode=ParseMode.MARKDOWN)
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            user_id = update.effective_user.id
            user_settings = self.user_settings.get(user_id, {})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = await update.message.reply_text("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            
            if not self.ocr_handler:
                await processing_message.edit_text("‚ùå OCR —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            file = await context.bot.get_file(photo.file_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if file.file_size > self.max_image_size:
                await processing_message.edit_text(
                    f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({file.file_size // 1024 // 1024} MB). "
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self.max_image_size // 1024 // 1024} MB"
                )
                return
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_data = BytesIO()
            await file.download_to_memory(image_data)
            image_bytes = image_data.getvalue()
            
            await processing_message.edit_text("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            ocr_language = user_settings.get('ocr_language', 'rus+eng')
            extracted_text = await self.ocr_handler.extract_text_from_image(image_bytes, ocr_language)
            
            if not extracted_text or extracted_text.strip() == "":
                await processing_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
                return
            
            # –£–ª—É—á—à–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            final_text = extracted_text
            if user_settings.get('improve_ocr', True) and self.translation_handler:
                await processing_message.edit_text("‚ú® –£–ª—É—á—à–∞—é –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞...")
                improvement_result = await self.translation_handler.improve_text(extracted_text)
                if improvement_result.get('success'):
                    final_text = improvement_result.get('improved_text', extracted_text)
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            target_language = user_settings.get('target_language', 'en')
            if target_language != 'auto' and self.translation_handler:
                await processing_message.edit_text("üåê –ü–µ—Ä–µ–≤–æ–∂—É —Ç–µ–∫—Å—Ç...")
                translation_result = await self.translation_handler.translate_text(
                    final_text, target_language, 'auto'
                )
                if translation_result.get('success'):
                    translated_text = translation_result.get('translated_text', final_text)
                    source_lang = translation_result.get('source_language', 'unknown')
                    
                    result_text = (
                        f"üì∏ **–†–µ–∑—É–ª—å—Ç–∞—Ç OCR:**\n\n"
                        f"üî§ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç** ({source_lang}):\n{final_text}\n\n"
                        f"üåê **–ü–µ—Ä–µ–≤–æ–¥** ({target_language}):\n{translated_text}"
                    )
                else:
                    result_text = f"üì∏ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n{final_text}"
            else:
                result_text = f"üì∏ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n{final_text}"
            
            await processing_message.edit_text(result_text, parse_mode=ParseMode.MARKDOWN)
            print(f"üì∏ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_photo: {e}")
            try:
                await processing_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            except:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        document = update.message.document
        
        if not self.ocr_handler or not self.ocr_handler.is_supported_format(document.file_name):
            await update.message.reply_text(
                f"‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ `{document.file_name}` –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(self.supported_formats)}",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await self.handle_photo(update, context)
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = update.effective_user.id
            user_settings = self.user_settings.get(user_id, {})
            text = update.message.text
            
            if len(text) > 4000:
                await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
                return
            
            processing_message = await update.message.reply_text("üåê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç...")
            
            if not self.translation_handler:
                await processing_message.edit_text("‚ùå –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            target_language = user_settings.get('target_language', 'en')
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
            translation_result = await self.translation_handler.translate_text(
                text, target_language, 'auto'
            )
            
            if translation_result.get('success'):
                original = translation_result.get('original_text')
                translated = translation_result.get('translated_text')
                source_lang = translation_result.get('source_language', 'unknown')
                target_lang = translation_result.get('target_language')
                method = translation_result.get('method', 'unknown')
                
                if source_lang == target_lang:
                    result_text = f"‚ÑπÔ∏è –¢–µ–∫—Å—Ç —É–∂–µ –Ω–∞ —è–∑—ã–∫–µ `{target_lang}`.\n\n**–¢–µ–∫—Å—Ç:**\n{original}"
                else:
                    result_text = (
                        f"üåê **–ü–µ—Ä–µ–≤–æ–¥** ({source_lang} ‚Üí {target_lang})\n"
                        f"üîß –ú–µ—Ç–æ–¥: {method}\n\n"
                        f"üìù **–û—Ä–∏–≥–∏–Ω–∞–ª:**\n{original}\n\n"
                        f"üåç **–ü–µ—Ä–µ–≤–æ–¥:**\n{translated}"
                    )
            else:
                error = translation_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                result_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {error}\n\n**–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n{text}"
            
            await processing_message.edit_text(result_text, parse_mode=ParseMode.MARKDOWN)
            print(f"üåê –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_text: {e}")
            try:
                await processing_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞")
            except:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer("üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {context.error}")
        
        if update and hasattr(update, 'effective_message'):
            try:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except Exception:
                pass
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!")
            print("üì± –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self.application.updater.idle()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")
            raise
        finally:
            await self.application.stop()
    
    async def start_webhook(self, webhook_url: str, port: int = 10000):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook"""
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
            print(f"üåê Webhook URL: {webhook_url}")
            
            await self.application.initialize()
            await self.application.start()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
            await self.application.updater.start_webhook(
                listen="0.0.0.0",
                port=port,
                webhook_url=webhook_url
            )
            
            print(f"‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —á–µ—Ä–µ–∑ webhook")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self.application.updater.idle()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ webhook: {e}")
            raise
        finally:
            await self.application.stop()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        print("ü§ñ UMBB GPT Bot - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        print("=" * 50)
        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        
        bot = TelegramBot()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
        webhook_url = os.getenv('WEBHOOK_URL')
        port = int(os.getenv('PORT', 10000))
        
        if webhook_url:
            print(f"üåê –†–µ–∂–∏–º: Webhook")
            await bot.start_webhook(webhook_url, port)
        else:
            print(f"üîÑ –†–µ–∂–∏–º: Polling")
            await bot.start_polling()
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        raise

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)