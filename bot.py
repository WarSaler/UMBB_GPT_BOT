import os
import asyncio
import logging
from io import BytesIO
from typing import Optional, Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes
)
from telegram.constants import ParseMode
from loguru import logger
from PIL import Image

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from openai_handler import get_openai_handler
from ocr_handler import get_ocr_handler
from translator import get_translation_handler

class TelegramBot:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.openai_handler = get_openai_handler()
        self.ocr_handler = get_ocr_handler()
        self.translation_handler = get_translation_handler()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.max_image_size = int(os.getenv('MAX_IMAGE_SIZE', '10485760'))  # 10MB
        self.supported_formats = os.getenv('SUPPORTED_IMAGE_FORMATS', 'jpg,jpeg,png,bmp,tiff,webp').split(',')
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.user_settings = {}
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application = Application.builder().token(self.bot_token).build()
        self._setup_handlers()
        
        logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("settings", self.settings_command))
        self.application.add_handler(CommandHandler("languages", self.languages_command))
        self.application.add_handler(CommandHandler("setlang", self.setlang_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        self.application.add_handler(MessageHandler(filters.Document.IMAGE, self.handle_document))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_settings:
            self.user_settings[user_id] = {
                'target_language': '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
                'use_openai': True,
                'preserve_structure': True
            }
        
        welcome_text = f"""ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!**

–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üì∏ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ** —Å —Ç–µ–∫—Å—Ç–æ–º (—á–µ–∫, –¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ)
üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç** –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
üåç **–ü–µ—Ä–µ–≤–µ–¥—É –Ω–∞ –ª—é–±–æ–π —è–∑—ã–∫** —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

**–ö–æ–º–∞–Ω–¥—ã:**
/help - –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
/languages - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤
/setlang [—è–∑—ã–∫] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
{', '.join(self.supported_formats).upper()}

**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {self.max_image_size // 1024 // 1024} –ú–ë

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç, –∏ —è –Ω–∞—á–Ω—É —Ä–∞–±–æ—Ç—É! üöÄ"""
        
        await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**

**1. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∏ –ø–µ—Ä–µ–≤–µ–¥–µ—Ç —Ç–µ–∫—Å—Ç
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞

**2. –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –ë–æ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –µ–≥–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫

**3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ `/settings` - –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
‚Ä¢ `/setlang —Ä—É—Å—Å–∫–∏–π` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫
‚Ä¢ `/languages` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏

**4. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:**
–†—É—Å—Å–∫–∏–π, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, –ù–µ–º–µ—Ü–∫–∏–π, –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π, –ò—Å–ø–∞–Ω—Å–∫–∏–π, –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π, –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π, –ö–∏—Ç–∞–π—Å–∫–∏–π, –Ø–ø–æ–Ω—Å–∫–∏–π, –ö–æ—Ä–µ–π—Å–∫–∏–π, –ê—Ä–∞–±—Å–∫–∏–π, –¢—É—Ä–µ—Ü–∫–∏–π –∏ –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ.

**5. –°–æ–≤–µ—Ç—ã:**
‚Ä¢ –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–∏—à–∫–æ–º –º–µ–ª–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ç–æ

**–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –ü–µ—Ä–µ—Å–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å. {self.max_image_size // 1024 // 1024} –ú–ë)"""
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings"""
        user_id = update.effective_user.id
        settings = self.user_settings.get(user_id, {})
        
        current_lang = settings.get('target_language', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π')
        use_openai = settings.get('use_openai', True)
        preserve_structure = settings.get('preserve_structure', True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = [
            [InlineKeyboardButton(f"üåç –Ø–∑—ã–∫: {current_lang}", callback_data="change_language")],
            [InlineKeyboardButton(f"ü§ñ AI: {'OpenAI' if use_openai else 'Google'}", callback_data="toggle_ai")],
            [InlineKeyboardButton(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {'–°–æ—Ö—Ä–∞–Ω—è—Ç—å' if preserve_structure else '–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å'}", callback_data="toggle_structure")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="reset_settings")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        settings_text = f"""‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**

**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
üåç –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫: **{current_lang}**
ü§ñ –ò–ò –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: **{'OpenAI GPT' if use_openai else 'Google Translate'}**
üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: **{'–í–∫–ª—é—á–µ–Ω–æ' if preserve_structure else '–í—ã–∫–ª—é—á–µ–Ω–æ'}**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:"""
        
        await update.message.reply_text(settings_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def languages_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /languages"""
        languages = await self.translation_handler.get_available_languages()
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —è–∑—ã–∫–æ–≤ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        lang_list = []
        for lang_name, lang_code in sorted(languages.items()):
            lang_list.append(f"‚Ä¢ **{lang_name.capitalize()}** (`{lang_code}`)") 
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        chunk_size = 30
        chunks = [lang_list[i:i + chunk_size] for i in range(0, len(lang_list), chunk_size)]
        
        for i, chunk in enumerate(chunks):
            header = "üåç **–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:**\n\n" if i == 0 else ""
            text = header + "\n".join(chunk)
            
            if i == len(chunks) - 1:
                text += "\n\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/setlang —Ä—É—Å—Å–∫–∏–π` –∏–ª–∏ `/setlang ru`"
            
            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    
    async def setlang_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /setlang"""
        user_id = update.effective_user.id
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫!\n\n–ü—Ä–∏–º–µ—Ä: `/setlang —Ä—É—Å—Å–∫–∏–π` –∏–ª–∏ `/setlang ru`\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤: /languages",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        target_language = " ".join(context.args).lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–∞
        languages = await self.translation_handler.get_available_languages()
        lang_code = self.translation_handler.get_language_code(target_language)
        
        if lang_code not in languages.values() and target_language not in languages:
            await update.message.reply_text(
                f"‚ùå –Ø–∑—ã–∫ '{target_language}' –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /languages –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if user_id not in self.user_settings:
            self.user_settings[user_id] = {}
        
        self.user_settings[user_id]['target_language'] = target_language
        
        lang_name = self.translation_handler.get_language_name(lang_code)
        await update.message.reply_text(
            f"‚úÖ –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: **{lang_name}** (`{lang_code}`)\n\n–¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —è–∑—ã–∫.",
            parse_mode=ParseMode.MARKDOWN
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —è–∑—ã–∫: {target_language}")
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        user_id = update.effective_user.id
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            file = await context.bot.get_file(photo.file_id)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            if file.file_size > self.max_image_size:
                await processing_msg.edit_text(
                    f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self.max_image_size // 1024 // 1024} –ú–ë"
                )
                return
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_bytes = await self._download_file(file.file_path)
            if not image_bytes:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await self._process_image(update, context, image_bytes, processing_msg, user_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)"""
        user_id = update.effective_user.id
        document = update.message.document
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if not any(document.file_name.lower().endswith(f'.{fmt}') for fmt in self.supported_formats):
            await update.message.reply_text(
                f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(self.supported_formats).upper()}"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        if document.file_size > self.max_image_size:
            await update.message.reply_text(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self.max_image_size // 1024 // 1024} –ú–ë"
            )
            return
        
        processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            file = await context.bot.get_file(document.file_id)
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
            image_bytes = await self._download_file(file.file_path)
            if not image_bytes:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞
            await self._process_image(update, context, image_bytes, processing_msg, user_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if not text or not text.strip():
            await update.message.reply_text("‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = self.user_settings.get(user_id, {})
        target_language = settings.get('target_language', '—Ä—É—Å—Å–∫–∏–π')
        use_openai = settings.get('use_openai', True)
        
        processing_msg = await update.message.reply_text("üîÑ –ü–µ—Ä–µ–≤–æ–∂—É —Ç–µ–∫—Å—Ç...")
        
        try:
            # –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
            result = await self.translation_handler.translate_text(
                text=text,
                target_lang=target_language,
                use_openai=use_openai
            )
            
            if result.get('success'):
                formatted_result = self.translation_handler.format_translation_result(result)
                await processing_msg.edit_text(formatted_result, parse_mode=ParseMode.MARKDOWN)
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–ª —Ç–µ–∫—Å—Ç (–¥–ª–∏–Ω–∞: {len(text)})")
            else:
                await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        data = query.data
        
        await query.answer()
        
        if user_id not in self.user_settings:
            self.user_settings[user_id] = {}
        
        settings = self.user_settings[user_id]
        
        if data == "change_language":
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —è–∑—ã–∫–∏
            keyboard = [
                [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_—Ä—É—Å—Å–∫–∏–π"),
                 InlineKeyboardButton("üá∫üá∏ English", callback_data="lang_–∞–Ω–≥–ª–∏–π—Å–∫–∏–π")],
                [InlineKeyboardButton("üá©üá™ Deutsch", callback_data="lang_–Ω–µ–º–µ—Ü–∫–∏–π"),
                 InlineKeyboardButton("üá´üá∑ Fran√ßais", callback_data="lang_—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π")],
                [InlineKeyboardButton("üá™üá∏ Espa√±ol", callback_data="lang_–∏—Å–ø–∞–Ω—Å–∫–∏–π"),
                 InlineKeyboardButton("üáÆüáπ Italiano", callback_data="lang_–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π")],
                [InlineKeyboardButton("üá®üá≥ ‰∏≠Êñá", callback_data="lang_–∫–∏—Ç–∞–π—Å–∫–∏–π"),
                 InlineKeyboardButton("üáØüáµ Êó•Êú¨Ë™û", callback_data="lang_—è–ø–æ–Ω—Å–∫–∏–π")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "üåç **–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:**\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /languages",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        
        elif data.startswith("lang_"):
            language = data[5:]
            settings['target_language'] = language
            
            await query.edit_message_text(
                f"‚úÖ –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: **{language.capitalize()}**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                parse_mode=ParseMode.MARKDOWN
            )
        
        elif data == "toggle_ai":
            settings['use_openai'] = not settings.get('use_openai', True)
            await self._update_settings_message(query, settings)
        
        elif data == "toggle_structure":
            settings['preserve_structure'] = not settings.get('preserve_structure', True)
            await self._update_settings_message(query, settings)
        
        elif data == "reset_settings":
            self.user_settings[user_id] = {
                'target_language': '—Ä—É—Å—Å–∫–∏–π',
                'use_openai': True,
                'preserve_structure': True
            }
            await query.edit_message_text(
                "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."
            )
        
        elif data == "back_to_settings":
            await self._update_settings_message(query, settings)
    
    async def _update_settings_message(self, query, settings):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        current_lang = settings.get('target_language', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π')
        use_openai = settings.get('use_openai', True)
        preserve_structure = settings.get('preserve_structure', True)
        
        keyboard = [
            [InlineKeyboardButton(f"üåç –Ø–∑—ã–∫: {current_lang}", callback_data="change_language")],
            [InlineKeyboardButton(f"ü§ñ AI: {'OpenAI' if use_openai else 'Google'}", callback_data="toggle_ai")],
            [InlineKeyboardButton(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {'–°–æ—Ö—Ä–∞–Ω—è—Ç—å' if preserve_structure else '–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å'}", callback_data="toggle_structure")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="reset_settings")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        settings_text = f"""‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**

**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
üåç –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫: **{current_lang}**
ü§ñ –ò–ò –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: **{'OpenAI GPT' if use_openai else 'Google Translate'}**
üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: **{'–í–∫–ª—é—á–µ–Ω–æ' if preserve_structure else '–í—ã–∫–ª—é—á–µ–Ω–æ'}**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:"""
        
        await query.edit_message_text(settings_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def _download_file(self, file_path: str) -> Optional[bytes]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Telegram"""
        try:
            url = f"https://api.telegram.org/file/bot{self.bot_token}/{file_path}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        return await response.read()
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {response.status}")
                        return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return None
    
    async def _process_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                           image_bytes: bytes, processing_msg, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: OCR + –ø–µ—Ä–µ–≤–æ–¥"""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            await processing_msg.edit_text("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏...")
            
            # OCR
            ocr_result = await self.ocr_handler.extract_text_from_image(image_bytes)
            
            if not ocr_result.get('success'):
                await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {ocr_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return
            
            extracted_text = ocr_result.get('text', '').strip()
            
            if not extracted_text:
                await processing_msg.edit_text("‚ùå –¢–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            settings = self.user_settings.get(user_id, {})
            target_language = settings.get('target_language', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π')
            use_openai = settings.get('use_openai', True)
            preserve_structure = settings.get('preserve_structure', True)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            await processing_msg.edit_text(f"üìù –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç! –ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ {target_language}...")
            
            # –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if use_openai and preserve_structure:
                try:
                    improved_text = await self.openai_handler.improve_ocr_text(extracted_text)
                    if improved_text:
                        extracted_text = improved_text
                        logger.info("–¢–µ–∫—Å—Ç —É–ª—É—á—à–µ–Ω —Å –ø–æ–º–æ—â—å—é OpenAI")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç: {e}")
            
            # –ü–µ—Ä–µ–≤–æ–¥
            translation_result = await self.translation_handler.translate_text(
                text=extracted_text,
                target_lang=target_language,
                use_openai=use_openai
            )
            
            if translation_result.get('success'):
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                response_text = "üì∏ **–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                response_text += f"**üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n{extracted_text[:500]}{'...' if len(extracted_text) > 500 else ''}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
                translated_text = translation_result['translated_text']
                source_lang = translation_result.get('source_language', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                target_lang = translation_result.get('target_language', target_language)
                service = translation_result.get('service', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å')
                
                response_text += f"**üîÑ –ü–µ—Ä–µ–≤–æ–¥ ({source_lang} ‚Üí {target_lang}):**\n{translated_text}\n\n"
                response_text += f"_–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é {service}_"
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if len(response_text) > 4096:  # –õ–∏–º–∏—Ç Telegram
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                    parts = [response_text[i:i+4000] for i in range(0, len(response_text), 4000)]
                    
                    await processing_msg.edit_text(parts[0], parse_mode=ParseMode.MARKDOWN)
                    
                    for part in parts[1:]:
                        await update.message.reply_text(part, parse_mode=ParseMode.MARKDOWN)
                else:
                    await processing_msg.edit_text(response_text, parse_mode=ParseMode.MARKDOWN)
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                
            else:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {translation_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
                error_msg += f"**–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n{extracted_text}"
                
                await processing_msg.edit_text(error_msg, parse_mode=ParseMode.MARKDOWN)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")
        
        if isinstance(update, Update) and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            await self.application.updater.idle()
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        finally:
            await self.application.stop()
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def start_webhook(self, webhook_url: str, port: int = 8000):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook –¥–ª—è Render"""
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {webhook_url}")
        
        await self.application.initialize()
        await self.application.start()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
        await self.application.bot.set_webhook(url=webhook_url)
        
        # –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞
        await self.application.updater.start_webhook(
            listen="0.0.0.0",
            port=port,
            url_path="webhook",
            webhook_url=webhook_url
        )
        
        logger.info(f"Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ
        try:
            await self.application.updater.idle()
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        finally:
            await self.application.stop()
            logger.info("Webhook —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = TelegramBot()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ webhook —Ä–µ–∂–∏–º
        webhook_url = os.getenv('WEBHOOK_URL')
        port = int(os.getenv('PORT', '8000'))
        
        if webhook_url:
            await bot.start_webhook(webhook_url, port)
        else:
            await bot.start_polling()
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main())